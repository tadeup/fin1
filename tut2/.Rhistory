runif(1, 39, 146)
runif(1, 39, 146)
sum(3!)
factorial(3)
sum(factorial(3))
1+sum(2^(10))
1+sum(2^(11))
1+sum(2^(9))
1+sum(2^(8))
1+sum(2^(15))
shiny::runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
library(shiny)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
mean
getAnywhere(mean)
tabPanel()
tabPanel
getAnywhere(tableOutput)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
character(0)
character(1)
as.character(1)
as.character(0)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
switch(as.character(estado$pergunta),
'2' = numericInput()
)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
shiny::runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
for(i in 1:10000){}
x <- vector(100000)
x <- matrix(100000)
x <- matrix(nrow = 100000, ncol = 2)
x[,1] <- rnorm(1)
View(x)
View(x)
x <- lapply(x[,1], rnorm(1))
x[,1] <- 0
x <- 0
x <- matrix(nrow = 100000, ncol = 2)
x <- matrix(runif(100000), nrow = 2)
View(x)
View(x)
x <- matrix(runif(100000), ncol = 2)
View(x)
View(x)
x <- matrix(runif(100000), ncol = 1)
y <- 10 + 0.5*x + runif(1)
View(y)
lm(x ~ y)
lm(y ~ x)
y <- 10 + 0.5*x + runif(2)
View(y)
lm(y ~ x)
y <- 10 + 0.5*x + runif(1)
lm(y ~ x)
plot(x,y)
x <- matrix(rnorm(100000), ncol = 1)
y <- 10 + 0.5*x + rnorm(1, sd = 3)
lm(y ~ x)
plot(x,y)
y <- 10 + 0.5*x + rnorm(1, sd = 40)
plot(x,y)
x <- rnorm(100000)
plot(x)
y <- 10 + 0.5*x + rnorm(sd = 40)
1,
y <- 10 + 0.5*x + rnorm(1, sd = 40)
plot(x,y)
plot(y)
x <- rnorm(10000, sd=30)
y <- 10 + 0.5*x + rnorm(1, sd = 40)
plot(y)
y <- 10 + 50*x + rnorm(1, sd = 40)
plot(y)
y <- 10 + 50*x + rnorm(1, sd = 5)
plot(y)
plot(y)
y <- 10 + 50*x + rnorm(1, sd = 5)
plot(y)
x <- rnorm(10000, sd=5)
y <- 10 + 50*x + rnorm(1, sd = 5)
plot(y)
plot(y, x)
plot(x,y)
y <- 10 + 50*x + rnorm(10000, sd = 5)
plot(x,y)
y <- 10 + 50*x + rnorm(10000, sd = 50)
plot(x,y)
w <- data.frame(x,y)
plot(w)
plot(w)
x <- rnorm(10000)
x <- rnorm(10000)
y <- 10 + 50*x + rnorm(1)
w <- data.frame(x,y)
plot(w)
x <- runif(10000)
y <- 10 + 50*x + rnorm(1)
w <- data.frame(x,y)
plot(w)
plot(x)
plot(y)
x <- read.csv("C:\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv"
x <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv"
)
View(x)
View(x)
x <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv")
View(x)
hist(x$RiskTolerance)
x <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv")
hist(x$RiskTolerance)
plot(x$RiskTolerance)
library(quantmod)
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
View(prices)
prices <- cbind(lapply(assets, getSymbols.google, from = "2016-01-01", auto.assign = FALSE))
View(prices)
View(prices)
prices <- cbind(lapply(assets, function(x){
getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
}))
View(prices)
foo <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- cbind(lapply(assets, foo))
View(prices)
View(prices)
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE))
}
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
View(prices)
rm(princer)
rm(pricer)
rm(prices)
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
foo <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- cbind(lapply(assets, foo))
View(prices)
prices <- NULL
for (asset in assets){
prices <- cbind(prices, foo)
}
View(prices)
prices <- NULL
for (asset in assets){
prices <- cbind(prices, foo(assets))
}
View(prices)
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01", auto.assign = FALSE)[,4])
}
prices <- NULL
for (asset in assets){
prices <- cbind(prices, foo(assets))
}
prices <- NULL
prices <- cbind(apply(assets, foo))
prices <- cbind(apply(assets, 1 , foo))
prices <- cbind(apply(assets, 2 , foo))
prices <- cbind(lapply(assets, foo))
prices <- as.data.frame(lapply(assets, foo))
View(prices)
TEST <- getSymbols.google("AXP",from = "2016-01-01", auto.assign = FALSE)
View(TEST)
Sys.time()
a <- Sys.time()
a - Sys.time()
a <- Sys.time()
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01", auto.assign = FALSE)[,4])
}
a - Sys.time()
a <- Sys.time()
foo <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- as.data.frame(lapply(assets, foo))
a - Sys.time()
rm(foo)
GetValues <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- as.data.frame(lapply(assets, GetValues))
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
GetValues <- function(x) getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- as.data.frame(lapply(assets, GetValues))
library(dplyr)
prices <- prices[apply(prices,1,function(x) all(!is.na(x))),]
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame()
View(prices)
is.na(prices)
which(is.na(prices))
View(prices)
colnames(prices) = assets
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame() %>%
colnames() = assets
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame() %>%
rename(assets)
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame()
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame() %>%
rename(assets)
View(prices)
all()
all(TRUE, TRUE, FALSE)
ROC
na.omit(ROC(prices, type = 'discrete'))
returns_daily <- na.omit(ROC(prices, type = 'discrete'))
returns_annual <- colMeans(returns) * 252
#matriz de covariancia
covMatrix <- cov(returns_daily)
covAnnual <- covMatrix * 252
#Para calcular a fronteira eficiente, precisamos simular combinações
#de portfolios. Neste caso, simularei 30.000 combinações.
#definir o numero de combinações
n_assets <- length(assets)
n_portfolios <- 3000000
#criar vetores/matriz para armazenar retornos, volatilidade e pesos dos portfolios
sim_returns <- rep(0, n_portfolios)
sim_volat <- rep(0, n_portfolios)
sim_SR <- rep(0, n_portfolios)
sim_weights <- matrix(0, n_portfolios, 6)
#loopar para cada combinação de portfolio
for (i in (1:n_portfolios)) {
#Criar um par aleatorio de pesos (vetor que soma 1)
weights <- c(runif(n_assets, 0, 1))
weights <- weights/sum(weights)
#Aplicar pesos para calcular os retornos
weighted_return <- weights %*% returns_annual
#volatilidade = desvpad
volat <- sqrt(t(weights) %*% (covAnnual %*% weights))
#sharpe ratio
sharpe <- weighted_return/volat
#appendar nos vetores/matriz criados
sim_returns[i] <- weighted_return
sim_volat[i] <- volat
sim_SR[i] <- sharpe
sim_weights[i,] <- weights
}
#dataframe para guardar retornos e volatilidades
portfolio <- data.frame('Returns' = sim_returns, 'Volatility' = sim_volat,
'Sharpe Ratio' = sim_SR)
#agregar os pesos no dataframe
i <- 1
for (asset in assets){
portfolio[asset] <- sim_weights[,i]
i = i + 1
}
#Example Plot
colors <- rev(heat.colors(101))
zcolor <- colors[(sim_SR - min(sim_SR))/diff(range(sim_SR))*100 + 1]
plot(x=sim_volat, y=sim_returns, col=zcolor)
#calcular rate of change
returns_daily <- na.omit(ROC(prices, type = 'discrete'))
returns_annual <- colMeans(returns_daily) * 252
#matriz de covariancia
covMatrix <- cov(returns_daily)
covAnnual <- covMatrix * 252
#Para calcular a fronteira eficiente, precisamos simular combinações
#de portfolios. Neste caso, simularei 30.000 combinações.
#definir o numero de combinações
n_assets <- length(assets)
n_portfolios <- 3000000
#criar vetores/matriz para armazenar retornos, volatilidade e pesos dos portfolios
sim_returns <- rep(0, n_portfolios)
sim_volat <- rep(0, n_portfolios)
sim_SR <- rep(0, n_portfolios)
sim_weights <- matrix(0, n_portfolios, 6)
#loopar para cada combinação de portfolio
for (i in (1:n_portfolios)) {
#Criar um par aleatorio de pesos (vetor que soma 1)
weights <- c(runif(n_assets, 0, 1))
weights <- weights/sum(weights)
#Aplicar pesos para calcular os retornos
weighted_return <- weights %*% returns_annual
#volatilidade = desvpad
volat <- sqrt(t(weights) %*% (covAnnual %*% weights))
#sharpe ratio
sharpe <- weighted_return/volat
#appendar nos vetores/matriz criados
sim_returns[i] <- weighted_return
sim_volat[i] <- volat
sim_SR[i] <- sharpe
sim_weights[i,] <- weights
}
#dataframe para guardar retornos e volatilidades
portfolio <- data.frame('Returns' = sim_returns, 'Volatility' = sim_volat,
'Sharpe Ratio' = sim_SR)
#agregar os pesos no dataframe
i <- 1
for (asset in assets){
portfolio[asset] <- sim_weights[,i]
i = i + 1
}
#Example Plot
colors <- rev(heat.colors(101))
zcolor <- colors[(sim_SR - min(sim_SR))/diff(range(sim_SR))*100 + 1]
plot(x=sim_volat, y=sim_returns, col=zcolor)
plot(x=sim_volat, y=sim_returns, col=zcolor)
heat.colors()
library(quantmod)
library(dplyr)
#Selecionar ativos a serem buscados
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
#Pegar retorno diario
GetValues <- function(x) getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- lapply(assets, GetValues) %>% as.data.frame()
#deletar datas sem preços
prices <- prices[complete.cases(prices),]
#renomear colunas
colnames(prices) = assets
#calcular rate of change
returns_daily <- na.omit(ROC(prices, type = 'discrete'))
returns_annual <- colMeans(returns_daily) * 252
covMatrix <- cov(returns_daily)
covAnnual <- covMatrix * 252
n_assets <- length(assets)
n_portfolios <- 3000000
sim_returns <- rep(0, n_portfolios)
sim_volat <- rep(0, n_portfolios)
sim_SR <- rep(0, n_portfolios)
sim_weights <- matrix(0, n_portfolios, 6)
for (i in (1:n_portfolios)) {
#Criar um par aleatorio de pesos (vetor que soma 1)
weights <- c(runif(n_assets, 0, 1))
weights <- weights/sum(weights)
#Aplicar pesos para calcular os retornos
weighted_return <- weights %*% returns_annual
#volatilidade = desvpad
volat <- sqrt(t(weights) %*% (covAnnual %*% weights))
#sharpe ratio
sharpe <- weighted_return/volat
#appendar nos vetores/matriz criados
sim_returns[i] <- weighted_return
sim_volat[i] <- volat
sim_SR[i] <- sharpe
sim_weights[i,] <- weights
}
portfolio <- data.frame('Returns' = sim_returns, 'Volatility' = sim_volat,
'Sharpe Ratio' = sim_SR)
i <- 1
for (asset in assets){
portfolio[asset] <- sim_weights[,i]
i = i + 1
}
colors <- rev(heat.colors(101))
zcolor <- colors[(sim_SR - min(sim_SR))/diff(range(sim_SR))*100 + 1]
plot(x=sim_volat, y=sim_returns, col=zcolor)
covMatrix
foo <- read.csv("C:\Users\tadeu\Desktop\FGV\GV DATA\javascript\d3_tutorials\proj001\testdata.csv")
foo <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\GV DATA\\javascript\\d3_tutorials\\proj001\\testdata.csv")
View(foo)
View(foo)
foo <- foo[-1,]
View(foo)
write.csv(foo, "C:\\Users\\tadeu\\Desktop\\FGV\\GV DATA\\javascript\\d3_tutorials\\proj001\\testdata.csv")
write.csv(foo, "C:\\Users\\tadeu\\Desktop\\FGV\\GV DATA\\javascript\\d3_tutorials\\proj001\\testdata.csv", row.names = F)
shiny::runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
options(Encoding="UTF-8")
Sys.getlocale()
install.packages("PortfolioAnalytics")
install.packages("quantmod")
install.packages("PerformanceAnalytics")
library(PortfolioAnalytics)
library(quantmod)
library(PerformanceAnalytics)
library(zoo)
library(plotly)
prices.data <- merge.zoo(df)
library(readxl)
library(dplyr)
setwd("C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\fin 1\\tut2")
df <- data.frame(
read_excel("abev3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("bbas3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("bbdc4_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("brfs3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("bvmf3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("itsa4_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("itub4_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("petr3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("petr4_2016.xlsx", col_names = F)[,2] %>% ts()
)
prices.data <- merge.zoo(df)
prices.data
colnames(df) <- c("ambev3","bbas3","bbdc4","brfs3","bvmf3","itsa4","itub4","petr3","petr4")
prices.data <- merge.zoo(df)
prices.data
returns.data <- CalculateReturns(prices.data)
prices.data <- merge.ts(df)
prices.data <- ts(df)
returns.data <- CalculateReturns(prices.data)
returns.data <- na.omit(returns.data)
returns.data
meanReturns <- colMeans(returns.data)
covMat <- cov(returns.data)
meanReturns
esperanca_retorno <- function(x){
x <- ts(x) %>% diff() %>% mean()
}
df_mean <- lapply(df, esperanca_retorno)
df <- data.frame(
read_excel("abev3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("bbas3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("bbdc4_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("brfs3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("bvmf3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("itsa4_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("itub4_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("petr3_2016.xlsx", col_names = F)[,2] %>% ts(),
read_excel("petr4_2016.xlsx", col_names = F)[,2] %>% ts()
)
prices.data <- ts(df)
returns.data <- CalculateReturns(prices.data)
returns.data <- na.omit(returns.data)
meanReturns <- colMeans(returns.data)
covMat <- cov(returns.data)
port <- portfolio.spec(assets = c("ambev3","bbas3","bbdc4","brfs3","bvmf3","itsa4","itub4","petr3","petr4"))
port <- add.constraint(port, type = "box", min = 0.05, max = 0.8)
port <- add.constraint(portfolio = port, type = "full_investment")
rportfolios <- random_portfolios(port, permutations = 500000, rp_method = "sample")
eff.frontier <- data.frame(Risk = rep(NA, length(vec)),
Return = rep(NA, length(vec)),
SharpeRatio = rep(NA, length(vec)))
minret <- 0.06/100
maxret <- maxret.opt$weights %*% meanReturns
